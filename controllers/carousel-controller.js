const { PrismaClient } = require("@prisma/client");
const prisma = new PrismaClient();
const axios = require("axios");
const multer = require("multer");
const FormData = require("form-data"); // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ form-data package

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥)
const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
exports.getCarousels = async (req, res) => {
  try {
    const carousels = await prisma.carousel.findMany({
      orderBy: { createdAt: "desc" },
    });
    res.status(200).json(carousels);
  } catch (error) {
    res.status(500).json({ error: "Error fetching carousels." });
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ ImgBB
const uploadToImgBB = async (file) => {
  const formData = new FormData();
  formData.append("image", file); // ‡πÉ‡∏™‡πà‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á Base64

  try {
    const response = await axios.post("https://api.imgbb.com/1/upload", formData, {
      params: {
        key: "ba9af64bebc3955c2b55f54fc52aca2f", // ‡πÉ‡∏™‡πà API Key ‡∏ï‡∏£‡∏á ‡πÜ
      },
      headers: {
        "Content-Type": "multipart/form-data",
      },
    });

    return response.data.data.url; // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  } catch (error) {
    console.error("‚ùå Error uploading image to ImgBB:", error);
    return null;
  }
};



// ‡∏™‡∏£‡πâ‡∏≤‡∏á Carousel ‡πÉ‡∏´‡∏°‡πà (‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ ImgBB)
exports.createCarousel = async (req, res) => {
  try {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å request ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!req.file || !req.file.buffer) {
      return res.status(400).json({ error: "Image file is required." });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JPG, PNG, GIF)
    const allowedMimeTypes = ["image/jpeg", "image/png", "image/gif"];
    if (!allowedMimeTypes.includes(req.file.mimetype)) {
      return res.status(400).json({ error: "Invalid file type. Only JPG, PNG, and GIF are allowed." });
    }

    // ‚úÖ ‡πÉ‡∏ä‡πâ FormData ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Base64 ‡πÉ‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    const formData = new FormData();
    formData.append("image", req.file.buffer.toString("base64"));
    formData.append("key", "ba9af64bebc3955c2b55f54fc52aca2f"); // üî• ‡πÉ‡∏™‡πà API Key ‡∏ï‡∏£‡∏á‡πÜ (‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ process.env)

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏õ ImgBB ‡∏î‡πâ‡∏ß‡∏¢ POST request
    const response = await axios.post("https://api.imgbb.com/1/upload", formData, {
      headers: formData.getHeaders(),
    });

    // ‚úÖ ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    const imageUrl = response.data.data.url;

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const newCarousel = await prisma.carousel.create({
      data: { image: imageUrl },
    });

    res.status(201).json({
      message: "Carousel image created successfully",
      carousel: newCarousel,
    });
  } catch (error) {
    console.error("Error uploading to ImgBB:", error.response ? error.response.data : error.message);
    res.status(500).json({ error: "Error uploading to ImgBB." });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô Carousel
exports.updateCarousel = async (req, res) => {
  const { id } = req.params;

  try {
    let updateData = {};
    if (req.file) {
      const imageUrl = await uploadToImgBB(req.file.buffer);
      updateData.image = imageUrl;
    }

    const updatedCarousel = await prisma.carousel.update({
      where: { id: Number(id) }, // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á id ‡πÄ‡∏õ‡πá‡∏ô Number
      data: updateData,
    });

    res.status(200).json({ message: "Carousel image updated successfully", carousel: updatedCarousel });
  } catch (error) {
    res.status(500).json({ error: error.message || "Error updating carousel." });
  }
};

// ‡∏•‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å Carousel
exports.deleteCarousel = async (req, res) => {
  const { id } = req.params;
  console.log("Deleting carousel ID:", id); // üõ† Debug

  if (!id) {
    return res.status(400).json({ error: "Missing carousel ID." });
  }

  try {
    await prisma.carousel.delete({ where: { id } }); // ‚ùå ‡πÄ‡∏≠‡∏≤ Number() ‡∏≠‡∏≠‡∏Å
    res.status(200).json({ message: "Carousel image deleted successfully" });
  } catch (error) {
    console.error("Error deleting carousel:", error); // üõ† Debug
    res.status(500).json({ error: "Error deleting carousel." });
  }
};


// ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á export upload ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
